So - Assuming that the requesting URL is "http://www.all-night-laundry.com/post/8", and the base URL is "http://www.all-night-laundry.com/post/"...

1) The php file interprets the post name as "8", which (since the comic doesn't have a second post) will correlate with post number 7.
2) A request is made against table2 for the highest entry that is less than or equal to 7. the characters and setting haven't changed since post 3, it it gets the JSON for post 3
3) the first item in the JSON is the style, a request is made for it and the beginning, middle, and end are pulled
4) It starts generating the HTML with the beginning of the style
5) for each other item in the array..
	request the category, get the beginning middle and end
	add the category beginning to the html
	for each other item in the array...
		request the item and page number, as well as the iteration of that item immediately before
		if only one item is returned
			don't display the "last" button
		parse the markdown for the item in question
		assemble the html for the item by using the category middle
		add it to the html
	if there is another item in the style
		add the html for the style middle
6) add the style end to the html
7) output the html



I will also need a separate page that just serves a single item. This page will almost always be loaded into an iframe on the main page. within the php code, there will have to be a variable that states a default single item style if none is specified.

0) the link in markdown will will be parsed and expanded such that the get data will include an item name, the requesting page number, the requested page number, a single-item style, and an orientation from the requested page number ("next" or "last" - if I request page 123 and "last", it will find the version immediately previous to page 123)
1) the php file requests the single item style and page number and gets the beginning, middle, and end.
2) if there is no orientation, 
	the php file requests the item and the page specified as well as the ones before and after it.
else if the orientation is next
	the php file requests the item and page specified as well as the two pages after it
else if the orientation is last
	the php file requests the item and page specified as well as the two pages before it
3) if the highest number page is equal to or greater than the requesting page
	There is no "next" button
4) if the lowest number page is equal to the requested page
	There is no "last" button
5) use the style beginning to start creating the html content
6) use the style middle and the item markdown to add to the content
7) use the style end to finish the markdown
8) output html

























Instead of storing everything in JSON, lets store it in plain text. That will be easier to work with. Special data types will begin with ">>>" all lines will be chacked for that and if it's not present, they'll be dumped directly to the HTML.

Single items:
* >>> var [VARIABLE] - a variable to be interpreted by the script
* >>> comment [TEXT] - a comment that won't be interpreted y the parser
* >>> link [ITEM NAME] - an item name to convert into a URL
* >>> ilink [ITEM NAME] [TEXT] - Convert this to a link that will be opened in the iframe
* >>> plink [TEXT] - Convert this to a link for the previous version of the current item
* >>> nlink [TEXT] - Convert this to a link for the next version of the current item
* >>> content - the next level of content in the "full"->"section"->"item" chain, or the iframe for "full" styles that single pages will go into. (in "full" styles, the "content" call is where the script will request the content for the next section, so it NEEDS to be present, even if you know that there will only be one section)

Indicate start or end positions
* >>> repeat ["start" OR "end"] - (only in "section" and "full") Everything in between repeats for each section or item (if multiple starts are present before an end, they will be used in sequence and loop until all sections or items have been used) (in "section" styles, the "repeat" call is when the script will request the content for the next item, so it NEEDS to be present, even if you know that there will only be one item).
* >>> not_first ["start" OR "end"] - (only in "section" and "full") Apply this to all items but the first
* >>> not_last ["start" OR "end"] - (only in  "section" and "full") Apply this to all items but the last
* >>> is_first ["start" OR "end"] - (only in "section" and "full") Apply this only to the first item
* >>> is_last ["start" OR "end"] - (only in  "section" and "full") Apply this only to the last item
* >>> is_prev ["start" OR "end"] - (only in "single" and "section") data that only appears if there's a previous item
* >>> is_next ["start" OR "end"] - (only in "single") data that only appears if there's a next item
* >>> no_prev ["start" OR "end"] - (only in "single" and "section") data that only appears if there is no previous item
* >>> no_next ["start" OR "end"] - (only in "single") data that only appears if there is no next item
* >>> head ["start" OR "end"] - indicates a section that goes into the header
* >>> iframe ["start" OR "end"] - indicates a section that goes into the div that surrounds the iframe
* >>> description ["start" OR "end"] - indicates the description for an item

Special data for items (must be listed before anything else):
* >>> disp_name - (only for items) The display name of the item
* >>> disp_image - (only for items) The image url for an item
* >>> item_data - (only for items) a varaible that can be used to store data about the item. Multiple of these can be used; they will be stored in an array

Special data for full page styles
* >>> single [NAME] - declare the single image style that should be used for the iframe

special data for content:
* >>> style - the style for the page (should be declared before any styles or items)
* >>> s_name - the name of the upcoming section (should be declared before the style) (There's no reason that this cannot contain any length of text or html)
* >>> s_style - the style of the upcoming section
* >>> item - an item within the section

Other special data (begins with ">>>>> "):
* >>>>> declare style [NAME] [PAGE] [TYPE]
* >>>>> declare name [URL] [PAGE]
* >>>>> declare content [PAGE]
* >>>>> declare item [NAME] [PAGE]
* >>>>> declare type [NAME] [TYPE]

Other Rules:
* Anything that needs to be parsed as plain html doesn't need to be preceeded with anything
* The following tags will be added programatically <head> </head> </body> <html> </html>
* Also, immediately after the <head> tag, some script stuff will be added
* All styles and item names will have to have internal names without spaces, given that the parsing is done based on whitespace.
* The full page version should nevver reference the next URL; to avoid spoilers, the source page is always treated as if it's the latest page.

Note: The following types need to make sure that a newline character is not input either before or after them:
* var
* link


Internal Variables:
* ITEM_NAME - The name used internally to reference this item
* DISP_NAME - The display name of an item (note, there's no rreason why this cannot contain html)
* IMAGE - the image url for an item
* ITEM_DATA [NUMBER (starting with 1)] - Other data for the item, stored as an array
* SECTION_NAME - the display name of a section (note, there's no rreason why this cannot contain html)
* SOURCE_URL - the URL of the source page that this page is referencing
* MAIN_URL - the URL for the main page of this site (not the source site)
* SECT_NUM - the number of the current section (starting with one)
* ITEM_NUM - The number of the current item in the current section (starting with one)







